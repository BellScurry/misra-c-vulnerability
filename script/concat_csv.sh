#!/bin/bash

# Usage: _is_number <number>
#
#   If the given string is number, echo 'true'.
#   Else, echo null
_is_number() {

    echo $1 | sed 's/^[0-9]\+\(\.[0-9]\+\)\?$/true/g'
}

# Usage: _find_word_in <word> <file>
#
#   Find the given word in the file.
#   If found, echo 'true'.
#   If not found, echo 'false'
_find_word_in() {

    result=$(sed -n "/$1/p" $2)

    if [[ -n "$result" ]]; then
        # Success: Found
        echo true
        return 0
    else
        # Fail: Not Found
        echo false
        return 1
    fi
}

_concat_csv() {

    linenum=0

    while IFS= read -r line || [[ -n $line ]];
    do
        linenum=$((linenum + 1))
        
        # Skip key comparison, assuming the two files have exactly same keys.
        first_key_value=$(sed -n "${linenum}p" < $1)

        # Use pipe to get line# before pattern matching.
        # For example, with
        #    key=$(sed -n "s/^\([^,]*\),\+.*$/\1/${linenum}p" < $1)
        # GNU sed will give line# after pattern matching.
        second_value=$(sed -n "${linenum}p" < $2 | sed -e "s/[^,]*,\(.*\)/\1/")

        echo "${first_key_value}, ${second_value}"
    done < $1
}

_concat_csv_diff() {

    linenum=0
    linediff=0

    while IFS= read -r line || [[ -n $line ]];
    do
        linenum=$((linenum + 1))
        
        # Skip key comparison, assuming the two files have exactly same keys.
        first_key_value=$(sed -n "${linenum}p" < $1)
        first_key=$(echo $first_key_value | sed 's/\([^,]*\),.*/\1/')
        first_value=$(echo $first_key_value | sed "s/[^,]*,[[:space:]]*\([^,[:space:]]*\).*/\1/g")

        # Use pipe to get line# before pattern matching.
        # For example, with
        #    key=$(sed -n "s/^\([^,]*\),\+.*$/\1/${linenum}p" < $1)
        # GNU sed will give line# after pattern matching.
        second_key=$(sed -n "$((linenum + linediff))p" < $2 | sed 's/\([^,]*\),.*/\1/')
        second_value=$(sed -n "$((linenum + linediff))p" < $2 | sed -e "s/[^,]*,[[:space:]]*\([^,[:space:]]*\).*/\1/")
        
        if [[ "$first_key" == "$second_key" ]]; then
            concat_oneline=true
        else
            concat_oneline=false

            if [[ "$(_find_word_in $first_key $2)" = true ]]; then
                linediff=$((linediff + 1))
            else
                linediff=$((linediff - 1))
            fi
        fi

        if [[ "$concat_oneline" = true ]]; then

            # Caculate Ratio: (even/odd - 1) * 100 (%)
            if [[ $(_is_number "$first_value") = true &&
                $(_is_number "$second_value") = true &&
                "$first_value" != "0" ]]; then

                diff_ratio=$(echo $first_value $second_value | awk '{ printf "%.2f", (($2/$1)-1)*100 }')"%"
                echo "${first_key_value}, ${second_value}, ${diff_ratio}"
            else
                echo "${first_key_value}, ${second_value}"
            fi
        fi
    done < $1
}

# Usage: concat_csv [options] <files>
#    or: concat_csv <files> [options] <files>
#    or: concat_csv <files> [options]
#
# - Concatenate contents of given csv files
#
# ASSUMPTION
# - The given files have keys in same order
#
# Options
# --diff: Print diff ratio
#
# Implementation
# - By using two subfunctions
#   * _is_number()
#   * _find_word_in()
#   * _concat_csv()
#   * _concat_csv_diff()
concat_csv() {

    # Flag Initialization
    print_diff=false
    
    # Variable Initialization
    func_arghit=0

    for arg in "$@"
    do
        case $arg in 
            --diff)
                print_diff=true
                ;;
            -*)
                ;;
            *)
                func_arghit=$((func_arghit+1))
                case $func_arghit in
                    1)
                        file1=$arg
                        ;;
                    2)
                        file2=$arg
                        ;;
                esac
                ;;
        esac
    done
 
    if [[ "$func_arghit" -ne 2 ]]; then
        >&2 echo "Wrong number of arguments passed to function concat_csv()"
        return 1
    fi

    if [[ "$print_diff" = true ]]; then
        _concat_csv_diff $file1 $file2
    else
        _concat_csv $file1 $file2
    fi
}
