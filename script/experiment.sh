#!/bin/bash
# Script Usage
# - $1: gemV Home
# - $2: gemV Config Directory
# - $3: Bench Config Directory
# - $4: Output Home

SCRIPT_HOME=$(dirname "$0")
source $SCRIPT_HOME/csv_to_gemv_option.sh
source $SCRIPT_HOME/make_digest.sh
source $SCRIPT_HOME/stat_to_csv.sh
source $SCRIPT_HOME/concat_csv.sh

# --help
usage() {

    echo "Usage: experiment.sh [--help] <gemV home> <gemV config directory> <bench config directory> <output home>"
}

# Argument Parsing
arghit=0    # Number of essential arguments

for arg in "$@"
do
    case $arg in 
        --help)
            usage
            exit
            ;;
        --*)
            ;;
        -*)
            ;;
        *)
            arghit=$((arghit+1))
            case $arghit in
                1)
                    GEMV_HOME=${arg}
                    ;;
                2)
                    GEMV_CONFIG_DIR=${arg}
                    ;;
                3)
                    BENCH_CONFIG_DIR=${arg}
                    ;;
                4)
                    OUTPUT_HOME=${arg}
                    ;;
                *)
                    ;;
            esac
            ;;
    esac
done

if [[ "$arghit" -ne 4 ]]; then
    >&2 echo "ERROR: Wrong number of arguments to the program"
    usage
    return 1
fi

# CONSTANTS
GEMV_BINARY="${GEMV_HOME}/build/ARM/gem5.opt"
GEMV_SIMSCRIPT="${GEMV_HOME}/configs/example/se.py"

# Start Experiment
gemv_config_count=$(ls ${GEMV_CONFIG_DIR}/config*.csv | wc -l)
bench_config_count=$(ls ${BENCH_CONFIG_DIR}/config*.csv | wc -l)

for file in $GEMV_CONFIG_DIR/config*.csv
do
    gemv_confignum=$(echo $file | sed 's/^\([^\/]*\/\)*config\([0-9]\+\).csv$/\2/')
    
    # Convert contents in csv-format gemV config file
    # to gemV command line option string
    gemv_config=$(csv_to_gemv_option $file)

    outpath1="$OUTPUT_HOME/gemv_config${gemv_confignum}"
    rm -rf $outpath1

    for benchfile in $BENCH_CONFIG_DIR/config*.csv
    do
        bench_confignum=$(echo $benchfile | sed 's/^\([^\/]*\/\)*config\([0-9]\+\).csv$/\2/')

        # Convert contents in csv-format bench config file
        # to gemV command line option string
        bench_config=$(csv_to_gemv_option $benchfile)

        outpath2="$outpath1/bench_config${bench_confignum}"
        gemv_option="-re --outdir=$outpath2"
        simscript_option="${gemv_config} ${bench_config}"

        # Do Simulation
        eval "$GEMV_BINARY $gemv_option $GEMV_SIMSCRIPT $simscript_option"
        
        # Concat with pair .csv file
        # - We will concat config 1&2, 3&4, 5&6, etc.
        # - If '2' replaced by N, it can be easily generalized.
        odd=$(( (bench_confignum - 1)/2 * 2 + 1))
        even=$(( odd + 1))
        oddfile="$outpath1/bench_config${odd}/stats.txt"
        evenfile="$outpath1/bench_config${even}/stats.txt"

        if [[ -e ${oddfile} && -e ${evenfile} ]]; then

            # Temporary Files
            tmp_stat_odd=$(mktemp)
            tmp_stat_even=$(mktemp)
            tmp_stat=$(mktemp)
            tmp_digest=$(mktemp)

            # Convert stat file to csv format
            stat_to_csv $oddfile > $tmp_stat_odd
            stat_to_csv $evenfile > $tmp_stat_even

            # Make contents of concatenated stat file
            concat_csv "--diff" $tmp_stat_odd $tmp_stat_even > $tmp_stat

            # Prefix
            #
            # - We will save prefix of '$concated_file' and '$digest'
            #   in a temporary file.
            # - The temporary file will be concatenated 
            #   with the file 'stats*and*.csv'
            # - $tmp_prefix: Filename of the temporary file
            # - The temporary file must be deleted 
            #   at the end of workload.
            # 
            # What prefix will include:
            #
            # - gemV Configuration Info
            # - Benchmark Configuration Info
            # - CSV Header

            # Make prefix temporary file
            tmp_prefix=$(mktemp)

            # gemV Configuration Info
            echo "---------- Common gemV Configurations: A1~A${gemv_config_count} ----------" >> $tmp_prefix
            echo ", A${gemv_confignum}" >> $tmp_prefix
            sed '/^[^,]\+\(,[,[:space:]]*\)*$/d' $file >> $tmp_prefix

            # Benchmark Configuration Info
            #
            # - Concat two bench config files
            #   into one integrated bench config file, 
            #   and concat it with digest file.
            echo "---------- Benchmark Configurations: B1~B${bench_config_count} ----------" >> $tmp_prefix
            echo ", B${odd}, B${even}" >> $tmp_prefix
            concat_csv $BENCH_CONFIG_DIR/config${odd}.csv $BENCH_CONFIG_DIR/config${even}.csv >> $tmp_prefix

            # CSV Header
            # - Specifying experiment number
            expnum_odd=$(( bench_config_count * (gemv_confignum-1) + odd ))
            expnum_even=$(( expnum_odd + 1))
            echo "---------- Statistics for Experiment E1~E$((gemv_config_count * bench_config_count))----------" >> $tmp_prefix
            echo ", E${expnum_odd}, E${expnum_even}, diff(E${expnum_odd} -> E${expnum_even})" >> $tmp_prefix

            # Specifying what gemV config & bench config used
            echo "Config, A${gemv_confignum} / B${odd}, A${gemv_confignum} / B${even}, " >> $tmp_prefix

            # Make contents of digest file 
            make_digest $tmp_stat > $tmp_digest

            # Concat prefix with statfile or digest file
            stat="$outpath1/stats${expnum_odd}and${expnum_even}.csv"
            digest="$outpath1/digest${expnum_odd}and${expnum_even}.csv"
            cat $tmp_prefix $tmp_stat > $stat
            cat $tmp_prefix $tmp_digest > $digest

            # Removal of the temporary files.
            rm $tmp_prefix $tmp_stat_odd $tmp_stat_even $tmp_stat $tmp_digest
        fi
    done
done
