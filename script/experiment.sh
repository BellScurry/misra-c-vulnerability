#!/bin/bash
# Script Usage
#   $1: gemV Home
#   $2: gemV Config Directory
#   $3: Bench Config Directory
#   $4: Output Home


# --help
usage() {

    echo "Usage: experiment.sh [--help] <gemV home> <gemV config directory> <bench config directory> <output home>"
}

# Usage
#   $1: Config File. Must be .csv format
#       ex) config1.csv
csv2option() {

    if [[ "$#" -ne 1 ]]; then
        >&2 echo "Wrong number of arguments passed to function csv2option()"
        return 
    fi

    result=""
    while IFS= read -r line || [[ -n $line ]];
    do
        col1=$(echo $line | sed 's/\(.*\),.*/\1/')

        if [[ ! -z $(echo $line | awk '/[^,]*,\s*\S+.*/') ]]; then

            col2=$(echo $line | sed 's/^[^,]*,[[:space:]]*\(.*\)$/\1/')
            result="$result --$col1=$col2 "
        else
            result="$result --$col1 "
        fi
    done < $1

    echo $result
}

# Usage
#    $1: Statistics File
#
# Absolute Path Info
make_digest() {

    if [[ "$#" -ne 1 ]]; then
        >&2 echo "Wrong number of arguments passed to function make_digest()"
        return
    fi

    # Find keyword 'vulnerability', 'sim_ticks', and 'sim_insts'.
    # Then, print whole line.
    sed -n '/^.*\(vulnerability\|sim_ticks\|sim_insts\).*$/p' $1
}

# Usage
#    $1: Stat File
# Read stat file, then echo in csv format.
stat2csv() {

    if [[ "$#" -ne 1 ]]; then
        >&2 echo "Wrong number of arguments passed to function stat2csv()"
        return
    fi

    sed $1 \
        -e '/^.*\(Begin\|End\).*$/d' \
        -e '/^[[:space:]]*$/d' \
        -e 's/#.*$//' \
        -e 's/[[:space:]]\+\([^[:space:]]\+\)/, \1/g'
}

# Usage
#    $1: 1st CSV File
#    $2: 2nd CSV File
# Concatenate contents of two csv files, assuming the two files have same keys.
concat_csv() {

    if [[ "$#" -ne 2 ]]; then
        >&2 echo "Wrong number of arguments passed to function concat_csv()"
        return
    fi

    linenum=0

    while IFS= read -r line || [[ -n $line ]];
    do
        linenum=$((linenum + 1))
        
        # Skip key comparison, assuming the two files have exactly same keys.
        first_key_value=$(sed -n "${linenum}p" < $1)
        
        # Use pipe to get line# before pattern matching.
        # For example, with
        #    key=$(sed -n "s/^\([^,]*\),\+.*$/\1/${linenum}p" < $1)
        # GNU sed will give line# after pattern matching.
        second_value=$(sed -n "${linenum}p" < $2 | sed -e "s/[^,]*,\(.*\)/\1/")
        echo "${first_key_value}, ${second_value}"
    done < $1
}

# Argument Parsing
arghit=0    # Number of essential arguments

for arg in "$@"
do
    case $arg in 
        --help)
            usage
            exit
            ;;
        --*)
            ;;
        -*)
            ;;
        *)
            arghit=$((arghit+1))
            case $arghit in
                1)
                    GEMV_HOME=${arg}
                    ;;
                2)
                    GEMV_CONFIG_DIR=${arg}
                    ;;
                3)
                    BENCH_CONFIG_DIR=${arg}
                    ;;
                4)
                    OUTPUT_HOME=${arg}
                    ;;
                *)
                    ;;
            esac
            ;;
    esac
done

if [[ "$#" -ne 4 ]]; then
    >&2 echo "ERROR: Wrong number of arguments to the program"
    usage
    return
fi

# CONSTANTS
GEMV_BINARY="${GEMV_HOME}/build/ARM/gem5.opt"
GEMV_SIMSCRIPT="${GEMV_HOME}/configs/example/se.py"

# Start Experiment
file_count=$(ls $GEMV_CONFIG_DIR/config*.csv | wc -l)
benchfile_count=$(ls $BENCH_CONFIG_DIR/config*.csv | wc -l)

for file in $GEMV_CONFIG_DIR/config*.csv
do
    gemv_confignum=$(echo $file | sed 's/^\([^\/]*\/\)*config\([0-9]\+\).csv$/\2/')
    
    # Convert contents in .csv file to command option string, using csv2option().
    gemv_config=$(csv2option $file)

    outpath1="$OUTPUT_HOME/gemv_config${gemv_confignum}"
    rm -rf $outpath1

    for benchfile in $BENCH_CONFIG_DIR/config*.csv
    do
        bench_confignum=$(echo $benchfile | sed 's/^\([^\/]*\/\)*config\([0-9]\+\).csv$/\2/')

        # Convert contents in .csv file to command option string, using csv2option().
        bench_config=$(csv2option $benchfile)

        outpath2="$outpath1/bench_config${bench_confignum}"
        gemv_option="-re --outdir=$outpath2"
        simscript_option="${gemv_config} ${bench_config}"

        # Do Simulation
        $GEMV_BINARY $gemv_option $GEMV_SIMSCRIPT $simscript_option

        # stats.txt -> csvstats.txt
        stat2csv $outpath2/stats.txt > $outpath2/csvstats.txt
        
        # Concat with pair .csv file : We will concat config 1&2, 3&4, 5&6, etc.
        odd=$(( (bench_confignum - 1)/2 * 2 + 1))   # If '2' replaced by N, it can be easily generalized.
        even=$(( odd + 1))
        oddfile="$outpath1/bench_config${odd}/csvstats.txt"
        evenfile="$outpath1/bench_config${even}/csvstats.txt"
        concated_file="$outpath1/stats${odd}and${even}.csv"

        if [[ -e ${oddfile} && -e ${evenfile} ]]; then

            echo ", config ${odd}, config ${even}" > $concated_file
            concat_csv $oddfile $evenfile >> $concated_file
            
            # Make digest of concatenated csv file, using make_digest()
            digest=$outpath1/digest${odd}and${even}.csv
            echo ", config ${odd}, config ${even}" > $digest
            make_digest $concated_file >> $digest
        fi
    done
done
