import sys
import re


RE_MAIN = re.compile(r".*<main>.*")
ARM_SECOND_HEX = {
    'a':'Branch',
    'b':'Branch with Link'
}
label_addr = []
armcode = []
infile = open(sys.argv[1], 'r')
flag_main = False

# 1. Get subroutine <main>
#
#    ARM Assebly File Format
#    - line.split()[0]: Address
#    - line.split()[1]: Instruction (hex)
#    - line.split()[2:]: Human-readable instruction & Comment
for line in infile.readlines():
    if flag_main:
        if not line.strip():
            break
        lastline = line
        branch = ARM_SECOND_HEX.get(line.split()[1][1])
        if branch:
            line = line.rstrip() + " " * 24 + "# " + branch + "\n"
            # Push branch destination address in decimal,
            # because we will easily calculate offset
            dest_addr = line.split()[3]
            label_addr.append(int(line.split()[3], 16))
        armcode.append(line)
    elif RE_MAIN.match(line):
        armcode.append(line)
        # Store start address of <main> subroutine in decimal,
        # because we will easily calculate offset
        #
        # We can get start address like:
        #    e.g., 00008d0c <main>:
        start_addr = int(line.split()[0], 16)
        flag_main = True


infile.close()
tmplist = list(lastline.split()[0])
del tmplist[-1]
end_addr = int("".join(tmplist), 16)

# Remove duplicates in 'label_addr', then sort
label_addr = list(set(label_addr))
label_addr.sort()

trash_index = -1
for addr in label_addr:
    if addr > end_addr:
        trash_index = label_addr.index(addr)
        break

del label_addr[trash_index:]

for i in range(0, len(label_addr)):
    offset = label_addr[i] - start_addr
    armcode.insert((offset // 4 + 1 + i), "L" + str(i+1) + ":\n")


outfile = open(sys.argv[2], 'w')
outfile.write("".join(armcode))
outfile.close()
