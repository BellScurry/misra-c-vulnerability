import os.path
import sys, argparse
import glob
import subprocess
import re


# For regex
RE_CAPITAL   = re.compile(r"[A-Z]*")
RE_SHELLVAR  = re.compile(r"\$.*")
RE_CONFIGNUM = re.compile(r"config(\d+).csv")

def csv_to_option(csvfile):
    # Return gemv_opt + script_opt
    config = ""
    tmp = []
    for line in csvfile:
        word = line.replace(',', '').strip().split()
        if len(word) == 1:
            tmp.append("--" + word[0])
        elif len(word) >= 2:
            tmp.append("--" + word[0] + "=" + word[1])

    config = " ".join(tmp)
    return config


def run(workload_info, outpath):
    # Read <project home>/config/configN.csv 
    # and <benchmark home>/workload_info/workloadN.csv,
    # then do the simulation
    GEMV_BINARY = GEMV_HOME + "/build/ARM/gem5.opt"
    GEMV_OPTION = "-re --outdir=" + outpath

    for c in glob.glob(PROJECT_HOME + "/config/config*.csv"):
        configfile = os.path.basename(c)
        confignum = RE_CONFIGNUM.search(configfile).group(1)
        tmp = open(PROJECT_HOME + "/config/config" + confignum + ".csv", "r")
        script_option = " ".join([GEMV_BASELINE_CONFIG, csv_to_option(tmp)])
        tmp.close()
        cmd = " ".join([GEMV_BINARY, GEMV_OPTION, GEMV_SCRIPT, script_option])
        # TODO: -c <workload> -o <workload options>
        subprocess.call(cmd, shell=True)

    # TODO: 2. Apply  Group.csv (after SIM)
    # TODO: 3. Apply Digest.csv (after SIM)



# If directory structure is same with the structure in README,
# we can guess the project home.
# Thus, we can guess pathinfo.csv and then,
# we can find out gemV home & baseline configurations also
PROJECT_HOME = os.path.dirname(os.path.realpath(__file__)) + "/.."

if not os.path.isfile(PROJECT_HOME + "/GEMV_HOME"):
    print("ERROR: File <project home>/GEMV_HOME does not exist", file=sys.stderr)
    sys.exit()

#   Guess GEMV_HOME
tmp = open(PROJECT_HOME + "/GEMV_HOME", "r")
GEMV_HOME = tmp.readline().strip()
tmp.close()

#   Guess GEMV_SCRIPT
GEMV_SCRIPT = GEMV_HOME + "/configs/example/se.py"

# Read <project home>/config/Baseline.csv
tmp = open(PROJECT_HOME + "/config/Baseline.csv", "r")
GEMV_BASELINE_CONFIG = csv_to_option(tmp)
tmp.close()


if __name__ == '__main__':
    '''
    arglist = argparse.ArgumentParser()
    arglist.add_argument("-w", metavar="<workload info>", nargs="+", action="append", help="List of workload info paths")
    arglist.add_argument("-o", metavar="<output path>", nargs="+", action="append", help="List of output paths")
    args = arglist.parse_args()
    print(args.w)   # TODO: Remove this line
    '''
    run(None, None)
