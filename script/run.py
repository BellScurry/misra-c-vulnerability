import os.path
import sys, argparse
import subprocess
import re

# For regex
RE_CAPITAL = re.compile(r"[A-Z]*")
RE_SHELLVAR = re.compile(r"\$.*")

# If directory structure is same with the structure in README,
# we can guess the project home.
# Thus, we can guess pathinfo.csv and then,
# we can find out gemV home & baseline configurations also
PROJECT_HOME = os.path.dirname(os.path.realpath(__file__)) + "/.."

if not os.path.isfile(PROJECT_HOME + "/GEMV_HOME"):
    print("ERROR: File <project home>/GEMV_HOME does not exist", file=sys.stderr)
    sys.exit()

# Guess GEMV_HOME
tmp = open(PROJECT_HOME + "/GEMV_HOME", "r")
GEMV_HOME = tmp.readline()
tmp.close()

# Guess...
GEMV_SCRIPT = GEMV_HOME + "/configs/example/se.py"
BASELINE_CONFIG = PROJECT_HOME + "config/Baseline.csv"

# TODO: Read <project home>/config/Baseline.csv

def csv_to_gemv_option(csvfile):
    # TODO: gemv_opt=blahblah, script_opt=blahblah
    # TODO: return gemv_opt + script_opt
    return None


def concat_gemv_option(opt1, opt2):
    # <GEMV BINARY> <gemV option> <GEMV SCRIPT> <script option>
    # TODO:
    return None
 

def run(workload_info, outpath):
    # TODO: 1. Read <project home>/config/configN.csv 
    #          and <benchmark home>/workload_info/workloadN.csv,
    #          then do the simulation
    # TODO: 2. Apply  Group.csv (after SIM)
    # TODO: 3. Apply Digest.csv (after SIM)
    return None


if __name__ == '__main__':
    arglist = argparse.ArgumentParser()
    arglist.add_argument("-w", metavar="<workload info>", nargs="+", action="append", help="List of workload info paths")
    arglist.add_argument("-o", metavar="<output path>", nargs="+", action="append", help="List of output paths")
    args = arglist.parse_args()

    print(args.w)   # TODO: Remove this line
