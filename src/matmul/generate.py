#
# Reference: https://github.com/CNugteren/myGEMM/blob/master/extra/minimal.cpp
#
import sys

def gen_matrix1(rowsize, colsize):
    matrix = []
    i = 0
    for row in range(0, int(rowsize)):
        for col in range(0, int(colsize)):
            e = i**2 + 3.6*i + 3.1
            i += 1
            matrix.append(str(e))
    return matrix

def gen_matrix2(rowsize, colsize):
    matrix = []
    i = 0
    for row in range(0, int(rowsize)):
        for col in range(0, int(colsize)):
            e = 0.01*i**2 + 1.2*i + 13.9
            i += 1
            matrix.append(str(e))
    return matrix

def gen_makefile(allocsize):

    prefix = "matmul_"
    '''
 push() {

    size="${1}x${2}_${3}x${4}"
    size_opt="-D_ROW_SIZE_1=${1} -D_COL_SIZE_1=${2}"
    size_opt="$size_opt -D_ROW_SIZE_2=${3} -D_COL_SIZE_2=${4}"
            
    # Target 1: Normal Code
    target1="double_matmul_${size}_ARM"
    rule1="$CC -static $size_opt double_matmul.c -o ${target1}"

    # Target 2: MISRA C Code
    target2="double_matmul_${size}_misrac_ARM"
    rule2="$CC -static $size_opt -D_MISRA_C double_matmul.c -o ${target2}"
   
    executable="$executable $target1 $target2"
    recipe="$recipe\n$target1:\n\t$rule1\n$target2:\n\t$rule2"
}

#push 10 10 10 10
#push 20 20 20 20
push 100 100 100 100

echo -e "executable=$executable\n\nall: $executable"
echo -e "$recipe\n"
echo -e "clean:\n\trm \$(executable)"
    '''

# TODO
# This script generates
#  - Workloads
#     (ex) workload/input1.txt
#  - Workload Infos
#     (ex) workload_info/workload1.csv
#  - Makefile
#  

if __name__ == '__main__':
    out = open(sys.argv[1], "w")
    out.write(" ".join(sys.argv[2:6]) + '\n')
    out.write(" ".join(gen_matrix1(sys.argv[2], sys.argv[3])) + '\n')
    out.write(" ".join(gen_matrix2(sys.argv[4], sys.argv[5])) + '\n')
    out.close()
